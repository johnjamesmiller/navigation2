amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "differential"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odometry/filtered
    bt_loop_duration: 10
    default_server_timeout: 20
    default_nav_to_pose_bt_xml: bt_configs/navigate_w_replanning_time.xml
    default_nav_through_poses_bt_xml: bt_configs/navigate_w_replanning_time.xml
    enable_groot_monitoring: False
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      # - nav2_smooth_path_action_bt_node
      - nav2_smac_planner
      - nav2_follow_path_action_bt_node

      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      # - nav2_globally_updated_goal_condition_bt_node
      # - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      # - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      # - nav2_single_trigger_bt_node
      - nav2_is_battery_low_condition_bt_node
      # - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
    # - nav2_planner_selector_bt_node
    # - nav2_controller_selector_bt_node
    # - nav2_goal_checker_selector_bt_node
    # - nav2_controller_cancel_bt_node
    # - nav2_path_longer_on_approach_bt_node
    # - nav2_wait_cancel_bt_node
    # - nav2_spin_cancel_bt_node
    # - nav2_back_up_cancel_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 5.0 # NOTE: This might be too high and may cause synchronization issues
    odom_topic: "odometry/filtered"
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    current_goal_checker: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 30.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.35
      yaw_goal_tolerance: 0.25
    FollowPath:
      # # plugin: "nav2_rotation_shim_controller::RotationShimController"
      # # primary_controller: "dwb_core::DWBLocalPlanner"
      # # # Rotation shim params
      # # angular_dist_threshold: 0.25
      # # forward_sampling_distance: 0.5
      # # rotate_to_heading_angular_vel: 1.8
      # # max_angular_accel: 3.2
      # # simulate_ahead_time: 1.0
      # # Primary Controller Params Below
      # plugin: "dwb_core::DWBLocalPlanner"
      # debug_trajectory_details: True
      # min_vel_x: 0.0
      # min_vel_y: 0.0
      # max_vel_x: 0.15
      # max_vel_y: 0.0
      # max_vel_theta: 0.6
      # min_speed_xy: 0.0
      # max_speed_xy: 0.15
      # min_speed_theta: 0.0
      # # Add high threshold velocity for turtlebot 3 issue.
      # # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      # acc_lim_x: 2.0
      # acc_lim_y: 0.0
      # acc_lim_theta: 2.0
      # decel_lim_x: -2.0
      # decel_lim_y: 0.0
      # decel_lim_theta: -2.0
      # vx_samples: 20
      # vy_samples: 5
      # vtheta_samples: 20
      # sim_time: 1.7
      # linear_granularity: 0.05
      # angular_granularity: 0.025
      # transform_tolerance: 0.2
      # xy_goal_tolerance: 0.35
      # trans_stopped_velocity: 0.1
      # short_circuit_trajectory_evaluation: True
      # stateful: True
      # critics: [
      #     "RotateToGoal",
      #     # "Oscillation",
      #     "ObstacleFootprint",
      #     "GoalAlign",
      #     "PathAlign",
      #     "PathDist",
      #     "GoalDist",
      #   ]
      # # ObstacleFootprint.scale: 32.0
      # # PathAlign.scale: 32.0
      # # PathAlign.forward_point_distance: 0.1
      # # GoalAlign.scale: 24.0
      # # GoalAlign.forward_point_distance: 0.1
      # # PathDist.scale: 32.0
      # # GoalDist.scale: 10.0
      # RotateToGoal.scale: 32.0
      # RotateToGoal.xy_goal_tolerance: 0.35
      # RotateToGoal.slowing_factor: 1.0
      # RotateToGoal.lookahead_time: 1.0
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.15 #The desired maximum linear velocity to use.
      lookahead_dist: 1.0 # had 1.0             #The lookahead distance to use to find the lookahead point
      min_lookahead_dist: 1.0 # had 1.0         #The minimum lookahead distance threshold when using velocity scaled lookahead distances
      max_lookahead_dist: 2.0 # had 2.0         #The maximum lookahead distance threshold when using velocity scaled lookahead distances
      lookahead_time: 2.0 #had 2.0             #The time to project the velocity by to find the velocity scaled lookahead distance. Also known as the lookahead gain.
      rotate_to_heading_angular_vel: 0.45 #had 0.30 #If rotate to heading is used, this is the angular velocity to use.
      transform_tolerance: 0.1 #The TF transform tolerance
      use_velocity_scaled_lookahead_dist: false #Whether to use the velocity scaled lookahead distances or constant lookahead_distance
      min_approach_linear_velocity: 0.1 #had 0.1 #minimum velocity threshold to apply when approaching the goal
      max_allowed_time_to_collision: 5.0 #had 5.0 #The time to project a velocity command to check for collisions, limited to maximum distance of lookahead distance selected #max_allowed_time_to_collision_up_to_carrot not implemented in 1.0.12
      use_regulated_linear_velocity_scaling: true #Whether to use the regulated features for curvature
      use_cost_regulated_linear_velocity_scaling: false #had false #Whether to use the regulated features for proximity to obstacles
      regulated_linear_scaling_min_radius: 0.01 #The turning radius for which the regulation features are triggered. Remember, sharper turns have smaller radii
      regulated_linear_scaling_min_speed: 0.25 #The minimum speed for which the regulated features can send, to ensure process is still achievable even in high cost spaces with high curvature.
      use_rotate_to_heading: true #Whether to enable rotating to rough heading and goal orientation when using holonomic planners. Recommended on for all robot types except ackermann, which cannot rotate in place.
      allow_reversing: false
      rotate_to_heading_min_angle: 0.785 #had 0.5 #The difference in the path orientation and the starting robot orientation to trigger a rotate in place, if use_rotate_to_heading is enabled.
      max_angular_accel: 0.8 # had 0.5 #Maximum allowable angular acceleration while rotating to heading, if enabled
      max_robot_pose_search_dist: 10.0 #had 20.0 #Maximum integrated distance along the path to bound the search for the closest pose to the robot. This is set by default to the maximum costmap extent, so it shouldn't be set manually unless there are loops within the local costmap.
      use_interpolation: true #Enables interpolation between poses on the path for lookahead point selection. Helps sparse paths to avoid inducing discontinuous commanded velocities. Set this to false for a potential performance boost, at the expense of smooth control.

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 4.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_footprint
      use_sim_time: False
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      footprint: "[ [0.25, 0.3048], [0.75, 0.00], [0.25, -0.3048], [-0.5, -0.12], [-0.5, 0.12] ]"
      plugins: ["static_layer", "stvl_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0 #    Exponential decay factor across inflation radius.
        inflation_radius: 0.60 #Radius to inflate costmap around lethal obstacles.
      stvl_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer" # For Foxy and later
        enabled: true
        voxel_decay: 10.
        decay_model: 0
        voxel_size: 0.05
        track_unknown_space: true
        max_obstacle_height: 5.0
        unknown_threshold: 15
        mark_threshold: 0
        update_footprint_enabled: true
        combination_method: 1
        origin_z: 0.0
        publish_voxel_map: false
        transform_tolerance: 0.2
        mapping_mode: false
        map_save_duration: 60.0
        observation_sources: pointcloud
        pointcloud:
          data_type: PointCloud2
          topic: /stereo_camera/depth/color/points
          marking: true
          clearing: true
          obstacle_range: 3.0
          min_obstacle_height: 0.065 # Fairly tight, requires a tight IMU for measuring tilt to make sure floor is excluded
          max_obstacle_height: 5.0
          expected_update_rate: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          voxel_filter: false
          clear_after_reading: true
          max_z: 7.0
          min_z: 0.195
          vertical_fov_angle: 1.01229
          horizontal_fov_angle: 1.51844
          decay_acceleration: 15.0
          model_type: 0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: False
      always_send_full_costmap: True
      footprint: "[ [0.25, 0.3048], [0.75, 0.00], [0.25, -0.3048], [-0.5, -0.12], [-0.5, 0.12] ]"
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "stvl_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0 #    Exponential decay factor across inflation radius.
        inflation_radius: 0.60 #Radius to inflate costmap around lethal obstacles.
      stvl_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer" # For Foxy and later
        enabled: true
        voxel_decay: 45.
        decay_model: 0
        voxel_size: 0.05
        track_unknown_space: true
        max_obstacle_height: 5.0
        unknown_threshold: 15
        mark_threshold: 0
        update_footprint_enabled: true
        combination_method: 1
        origin_z: 0.0
        publish_voxel_map: false
        transform_tolerance: 0.2
        mapping_mode: false
        map_save_duration: 60.0
        observation_sources: pointcloud
        pointcloud:
          data_type: PointCloud2
          topic: /stereo_camera/depth/color/points
          marking: true
          clearing: true
          obstacle_range: 3.0
          min_obstacle_height: 0.065 # Fairly tight, requires a tight IMU for measuring tilt to make sure floor is excluded
          max_obstacle_height: 5.0
          expected_update_rate: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          voxel_filter: false
          clear_after_reading: true
          max_z: 7.0
          min_z: 0.195
          vertical_fov_angle: 1.01229
          horizontal_fov_angle: 1.51844
          decay_acceleration: 15.0
          model_type: 0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: true
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: empty_office_bedding.yaml

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      downsample_costmap: false # whether or not to downsample the map
      downsampling_factor: 1 # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false #True causes planner to crash when            # allow traveling in unknown space
      max_iterations: -1 #was 1000         # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_planning_time: 5.0 # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      motion_model_for_search: "DUBIN" #was reeds_shupp # 2D Moore, Von Neumann; Hybrid Dubin, Redds-Shepp; State Lattice set internally
      angle_quantization_bins: 72 #was 72 - 64 worked     # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      analytic_expansion_ratio: 3.5 # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0 # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
      minimum_turning_radius: 0.1 # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      reverse_penalty: 2.0 #was 2.0            # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0 #was 0 - 0.15 worked           # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.0 #was 1.0         # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 1.0 #was 2.0           # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.015
      lookup_table_size: 20.0 # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: false # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      tolerance: 0.5 #was not defined                      # tolerance for planning if unable to reach exact pose, in meters, for 2D node
      max_on_approach_iterations: 1000 #was not defined    # maximum number of iterations to attempt to reach goal once in tolerance, 2D only
      cost_travel_multiplier: 1.0 #was not defined       # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      smooth_path: True # If true, does a simple and quick smoothing post-processing to the path
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1e-10
        do_refinement: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_footprint
    transform_timeout: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 50
